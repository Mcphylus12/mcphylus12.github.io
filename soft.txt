
Frontend
- UX
- CSS + HTML
- Component design
Data
- SQL
- Mongo
- Analytics
Backend
- Design Patterns
- RESTful
- Message Contracts
- Architectural Patterns for microservices
Devops
- Continuous integrations (Git branching, gate build pipelines)
- Continuous deployment (main deployment pipelines scripts, helm, terraform)
- Understanding infrastructure (K8s, Azure Portal, AWS)
Testing
- Automation
- Test Case Writing and maintaining
- Exploratory
Project management
- Story writing
- Epic and feature management
## Architecture
- https://microservices.io/
- https://learn.microsoft.com/en-us/azure/architecture/
- https://www.cncf.io/projects/
## Software Design
- https://refactoring.guru/
- https://microsoft.github.io/code-with-engineering-playbook/observability/log-vs-metric-vs-trace/
- https://www.linkedin.com/pulse/rule-30-when-your-method-class-packages-too-big-maaz-rehman
- Google "Refactor til you drop" or "Extract til you drop"
- Google "Solid Principles" and take your pick
## Testing
- https://blog.cleancoder.com/uncle-bob/2014/12/17/TheCyclesOfTDD.html
- https://learn.microsoft.com/en-us/devops/develop/shift-left-make-testing-fast-reliable
- https://learn.microsoft.com/en-us/aspnet/core/test/integration-tests?view=aspnetcore-8.0
- https://martinfowler.com/bliki/UnitTest.html
## Blogs
- https://medium.com/@kentbeck_7670
- https://martinfowler.com/
- https://devblogs.microsoft.com/dotnet/
- https://blog.cleancoder.com/
- https://microsoft.github.io/code-with-engineering-playbook/
## Examples
- https://github.com/dotnet-architecture/eShopOnContainers
## Technologies
- https://dotnet.microsoft.com/en-us/learn
- https://dotnet.microsoft.com/en-us/learn/aspnet
- https://dotnet.microsoft.com/en-us/apps/aspnet/web-apps/blazor
- https://github.com/jbogard/MediatR
- https://kubernetes.io/
- https://helm.sh/
- https://www.docker.com/resources/what-container/
- https://www.mongodb.com/
- https://www.rabbitmq.com/
- https://keda.sh/
- https://xunit.net/
## Katas
- https://www.codewars.com/
## Youtube Channels
- https://www.youtube.com/@ContinuousDelivery
- https://www.youtube.com/channel/UCrkPsvLGln62OMZRO6K-llg
- https://www.youtube.com/channel/UCJZv4d5rbIKd4QHMPkcABCw
# QA Interview question
Preference between Tests case or exploratory?
Preference on Frontends Vs Apis
Opinion/Experience on parameterised Tests
Utilisation of Metrics and observability when raising a defect
Working with Design Defects
Opinions on QA vs Development Pacing. Run Tests Behind? Get ahead with test cases 
How would you check if a bug is related to the frontend or backend
Where would you draw the line between dev and QA with a bug.
# Interview questions
## Stage 1
### Company
- What do they know about Company
- What do they know about Product
### Candidate
- Who Are They - Introduce yourself?
- Why are you looking to move? what do you enjoy about your current role
- What are they looking for in their career 
  - What do you want to do differently at your next role
  - Why are you leaving your current role
  - What are you looking for in the short and medium term? 
  - Any Specific Areas they find interesting
- Biggest success, biggest mistake
- Hobbies 
  - Any technical hobbies outside of work? Last tech thing learnt outside of work?
  - Any hobbies that aren't tech? Last non tech thing learnt outside of work?
### Process (Experience/Opinion)
- Pair Programming? Last thing you taught someone
- Peer reviews
- Agile
- Scrum
### Tech
- Explain the technical challenges between a couple of CV items
- Testing/TDD
  - Experience
  - Benefits and potentially drawbacks
- Design Patterns - Pick 2 and talk about why they are good and what sort of problem you could solve with them?
- Solid Principles - pick 2 and talk about why they are good and what a violation looks like?
- Pick 2 important things for creating good software
- Walk through some basic steps finding an issue in a web app
- Notable Frameworks/Libraries
- Thoughts on latest languages features
- [MID/SNR] What would your test strategy be for a new product
- [MID/SNR] Example of an anti pattern and how you would solve it
## Stage 2
- Technical Test
- Re-ask about any tech questions they didn't know in first stage to see if they've done reading between
- Best bug they've found/fixed
- If you could go to any time period which one would it be
- Interest in any other programming languages
  - Comparison to C#
# Progression
## Specialisation Areas
- Project management
- Front end design
- QA (Automation)
- Architecture
- Databases/Data
- Devops
- Product ownership
- Business Analytics
## Jnr
- Motivated and proactive learner
- Needs Check-ins to make sure they are on the right track
- Should spend longer fixing bugs/working on stories to learn areas of the codebase
- PD should be around technical excellence foundations like Design patterns and solid
  - There should be proactive interest to progress in these areas
- No specialisation
- No expectation of consistent meeting involvement but need to see confidence they will put an idea forward when they have it
- Much more learner than teacher
### Transition to mid: 
- Gaining knowledge and confidence to complete work independently. 
- Aiming for the mindset of best solution not first solution.
- responds well to requests for help in parts of the system they worked on
- Demonstrates time management skills 
- Improving contributions to meetings and team discussions
## Mid
- Continued Learning in foundations but now demonstrating knowledge in where to apply them in upcoming work
- They can justify why they solved a problem a particular way
- Expected to be able to handle sprint work independently (Task levels)
- Looking to specialise in an interest
- Consistent meeting involvement asking questions and ensuring they are up to speed
- 50/50 Learner teacher
- Can be given ownership of problems and idea (needs help planning but can handle the work by themselves)
- May still have areas of the system they are not completely comfortable working in
### Transition to snr
- Demonstrable Knowledge and skill in specialisation
- Apparent they proactively help those around them and others rely on them for knowledge
- Showing elements of leadership in meetings 
- Several examples of handling extra responsibilities. Showing time management and Small scale project management skills(planning, understanding stakeholders)
- Capable of picking up work across the system with negligible difference in speed of delivery that cant be accounted for with things like differences in code quality
## Snr
- Is Active in meetings. Sometimes Running them and expected to pitch ideas/start conversations
- Is a quick enough worker that they can contribute same as mid level while also spending time mentoring/Working on ad hoc side requests
- Can be given problem and can plan and execute to a high level
- Contributing and leading in their specialisation within the team
- Actively looking to teach and mentor juniors/mids. And taking responsibility for juniors not getting stuck and blocked (eg checking in)
- expected to be able to take their hand to any part of the products they work on
- Will take on delegated matters of team leadership/direction
### Transition to principal
- Takes time to stay up to date on work they are not directly involved in
- Proactively pushes the team as a whole to improve
- Is looked to from outside the team on their specialisation and the systems they work on
## Principal/Tech lead
- Is expected to book and lead meetings regarding technical quality
- Is a wider point of contact on their specialisation within the company
- Keeps a rolling understanding of the larger systema and functions as a point of contact for any technical questions in their area
- Actively consistent participation in matters regarding team direction and philosiphy
